#include<stdio.h>
#include <string.h>
#include <unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
void mysys(char *command)
{
    command[strlen(command) - 1] = '\0';
    const char s[2] = " ";
    char *token;
    token = strtok(command, s);
    char *argv[1024];
    char *redirect[1024];
    int i = 0;
    int j = 0;
    if(!token)
        return;

    int oldfd = 1;
    int flag = 0; // 判断是否有<< 或 <，如果没有则需要执行一次命令
    while(token != NULL)
    {

        if(!strncmp(token, ">>", 2) || !strncmp(token, ">", 1) || !strncmp(token, "<", 1))
            redirect[j++] = token;
        else
            argv[i++] = token;
        if(!strncmp(token, ">>", 2) || !strncmp(token, ">", 1)) flag++;
        token = strtok(NULL, s);
    }
    
    argv[i] = NULL;
    if(flag == 0) redirect[j++] = "---";
    pid_t pid;
    pid = fork();
    if(pid == 0)
    {
        for(i = 0;i < j;i++)
        {
            if(!strncmp(redirect[i], ">>", 2))
                oldfd = open(redirect[i] + 2, O_WRONLY | O_APPEND, 00777);
            else if(!strncmp(redirect[i], ">", 1))
                oldfd = open(redirect[i] + 1, O_WRONLY | O_CREAT | O_TRUNC, 00777);
            else if(!strncmp(redirect[i], "<", 1))
            {
                dup2(open(redirect[i] + 1, O_RDONLY), 0);
                continue;
            }
            dup2(oldfd, 1);
            pid_t pid1;
            pid1 = fork();
            if(pid1 == 0)
                execvp(argv[0], argv);
            wait(NULL);
        }
        exit(0);
    }
    wait(NULL);
}
/*    pid_t pid;
    pid = fork(); 
    if(pid == 0){
        command[strlen(command) - 1] = '\0';
        const char s[2] = " ";
        char *token;
        token = strtok(command, s);
        char *argv[1024];
        int i = 0;
       
        if(!token)
            return;

        while(token != NULL)
        {
            argv[i++] = token;
            token = strtok(NULL, s);
        }
        argv[i] = NULL;
        int oldfd = 1;
        int newfd = 1;

        if(!strncmp(argv[i - 1], ">>", 2))
            oldfd = open(argv[i - 1] + 2, O_WRONLY | O_APPEND, 00777);
        else if(!strncmp(argv[i - 1], ">", 1))
            oldfd = open(argv[i - 1] + 1, O_WRONLY | O_CREAT, 00777);
        else if(!strncmp(argv[i - 1], "<", 1))
        {
            oldfd = open(argv[i - 1] + 1, O_RDONLY);
            newfd = 0;
        }
        dup2(oldfd, newfd);
        if(newfd != oldfd)
            argv[i - 1] = argv[i];

        execvp(argv[0], argv);
    }

    wait(NULL);


}*/
int main()
{
    char buf_read[1024];
	char input_message[] = "> ";
    while(1)
	{
		memset(buf_read, 0, sizeof(buf_read));
		// 清空写入文件缓冲区中的内存
		
		// 打印提示信息
		write(STDOUT_FILENO, input_message, strlen(input_message));
		// 读取用户的键盘输入信息
		read(STDIN_FILENO, buf_read, sizeof(buf_read));
		// 判断用户输入的内容是否为quit
	
        if (!strncmp(buf_read, "exit", 4))
	        exit(0);
        else if(!strncmp(buf_read, "cd", 2))
        {
            buf_read[strlen(buf_read) - 1] = '\0';
            chdir(buf_read + 3);
        } else
            mysys(buf_read);
    }	    
}

